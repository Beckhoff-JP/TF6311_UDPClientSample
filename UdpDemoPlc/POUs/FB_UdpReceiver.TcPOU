<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_UdpReceiver" Id="{3b4b2ae9-c069-42e3-9b69-f42439287066}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'c++_compatible'}
FUNCTION_BLOCK FB_UdpReceiver IMPLEMENTS ITcIoUdpProtocolRecv
VAR_INPUT
END_VAR
VAR_OUTPUT
	receive_complete	:BOOL;
	receive_data 		:T_Arg;
END_VAR
VAR
	{attribute 'TcInitSymbol'}
	oid : OTCID; 
	ipUdp : ITcIoUdpProtocol;
	nUdpPort : UINT := 10000;
	nReceivedPakets : UINT;
	uLastReceivedIP : U_IpAdr; 
	hrInit : HRESULT;
	hrSend  : HRESULT;  
	snd_flag	:BOOL;
	ok_counter	:UDINT;
	port_change_counter :UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF ipUdp <> 0 THEN
	receive_complete := FALSE;
	ipUdp.CheckReceived();
END_IF
]]></ST>
    </Implementation>
    <Method Name="FB_exit" Id="{0258286a-12f2-440d-8e54-fd50a76e4c92}">
      <Declaration><![CDATA[{attribute 'conditionalshow'}
METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInCopyCode THEN // no online change
	IF ipUdp <> 0 THEN 
		ipUdp.UnregisterReceiver(nUdpPort); // Shutdown
		FW_SafeRelease(ADR(ipUdp));
		FB_exit := TRUE; 
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{3f9ab792-5971-4b0c-a6bc-dc33a9b3d66e}">
      <Declaration><![CDATA[{attribute 'conditionalshow'}
METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	nListenPort: UINT; // Receive port
END_VAR
VAR
	ipSrv : ITComObjectServer;

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInCopyCode THEN // no online change
	IF ipUdp = 0 AND oid <> 0 THEN
		IF nListenPort <> 0 THEN
			nUdpPort := nListenPort;
		END_IF
	    hrInit := FW_ObjMgr_GetObjectInstance(	oid:=oid, 
											iid:=TC_GLOBAL_IID_LIST.IID_ITcIoUdpProtocol, 
											pipUnk:=ADR(ipUdp) );
		IF SUCCEEDED(hrInit) THEN 
			IF  SUCCEEDED(ipUdp.RegisterReceiver(nUdpPort, THIS^)) THEN //open port
				FB_init := TRUE;
			ELSE 
				FB_init := FALSE; 
				FW_SafeRelease(ADR(ipUdp));
			END_IF
		END_IF
	ELSIF oid = 0 THEN 
		FB_init := FALSE; 
		hrInit := ERR_INVALID_PARAM; 				
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_reinit" Id="{230ea14e-9797-48ee-9586-6313ceab7837}">
      <Declaration><![CDATA[{attribute 'conditionalshow'}
METHOD FB_reinit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (ipUdp <> 0) THEN 
	ipUdp.RegisterReceiver(nUdpPort, THIS^);
	FB_reinit := TRUE; 
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="ListenPort" Id="{d250a24a-cde7-4603-a139-a64623b58b9c}">
      <Declaration><![CDATA[PROPERTY PUBLIC ListenPort : UINT]]></Declaration>
      <Get Name="Get" Id="{02006bcf-71b1-41d0-b53c-6da5bf6eee1b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{887dbcd8-b4dd-43d1-a0ac-ee41591c5620}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF nUdpPort = ListenPort THEN
	RETURN;
END_IF

IF SUCCEEDED(ipUdp.UnregisterReceiver(nUdpPort)) THEN
	nUdpPort := ListenPort;
	FB_reinit();
	port_change_counter := port_change_counter + 1;
END_IF
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ReceiveData" Id="{cb5b89bf-a2d8-4ac3-bd40-64d876626d0f}">
      <Declaration><![CDATA[{attribute 'object_name' := 'ReceiveData'}
{attribute 'c++_compatible'}
{attribute 'signature_flag' := '33554688'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'minimal_input_size' := '4'}
METHOD ReceiveData : HRESULT
VAR_INPUT
	ipAddr	: UDINT;
	udpDestPort	: UINT;
	udpSrcPort	: UINT;
	nData	: UDINT;
	pData	: PVOID;
	pVlan	: POINTER TO ETYPE_VLAN_HEADER := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nReceivedPakets := nReceivedPakets+1;
uLastReceivedIP.ipAdrInternal := ipAddr;

IF ipUdp <> 0 THEN
	receive_data.cbLen := nData;
	receive_data.pData := pData;
	receive_complete := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SendData" Id="{5b47bf08-de51-4ec7-b866-86dcaf1f3d17}">
      <Declaration><![CDATA[METHOD PUBLIC SendData : HRESULT
VAR_INPUT
	dest			: ARRAY [0..3] OF BYTE;
	nTargetPort		: UINT;
	data			: T_ARG;
END_VAR

VAR
	uTargetHostIP	: U_IpAdr;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[uTargetHostIP.ipAdr := dest;
hrSend := ipUdp.SendData(uTargetHostIP.ipAdrInternal, nTargetPort, nUdpPort, data.cbLen, data.pData, TRUE, 0); // send data
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TcAddRef" Id="{2d410f6b-c6bd-4033-8c18-8496c8308aff}">
      <Declaration><![CDATA[{attribute 'object_name' := 'TcAddRef'}
{attribute 'c++_compatible'}
{attribute 'signature_flag' := '33554688'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'minimal_input_size' := '4'}
METHOD TcAddRef : UDINT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="TcQueryInterface" Id="{0544c61f-9985-4e5f-b52a-347332675914}">
      <Declaration><![CDATA[{attribute 'object_name' := 'TcQueryInterface'}
{attribute 'c++_compatible'}
{attribute 'signature_flag' := '33554688'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'minimal_input_size' := '4'}
METHOD TcQueryInterface : HRESULT
VAR_INPUT
	iid	: REFERENCE TO IID;
	pipItf	: POINTER TO PVOID;
END_VAR
VAR
	ipUdpRecv : ITcIoUdpProtocolRecv;
	ipUnknown : ITcUnknown;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF GuidsEqual(ADR(iid), ADR(TC_GLOBAL_IID_LIST.IID_ITcIoUdpProtocolRecv)) THEN
	ipUdpRecv := THIS^; // cast to interface pointer
	pipItf^ := ITCUNKNOWN_TO_PVOID(ipUdpRecv);
	TcAddRef();
	TcQueryInterface := S_OK;
ELSIF GuidsEqual(ADR(iid), ADR(TC_GLOBAL_IID_LIST.IID_ITcUnknown)) THEN
	ipUnknown := THIS^; // cast to interface pointer
	pipItf^ := ITCUNKNOWN_TO_PVOID(ipUnknown);
	TcAddRef();
	TcQueryInterface := S_OK;
ELSE
	TcQueryInterface := E_HRESULTAdsErr.NOINTERFACE ; //Call super if this fb extends some other
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TcRelease" Id="{bb0886f8-6f09-4d5a-835f-a451f23c160e}">
      <Declaration><![CDATA[{attribute 'object_name' := 'TcRelease'}
{attribute 'c++_compatible'}
{attribute 'signature_flag' := '33554688'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'minimal_input_size' := '4'}
METHOD TcRelease : UDINT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_UdpReceiver">
      <LineId Id="3" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="FB_UdpReceiver.FB_exit">
      <LineId Id="3" Count="2" />
      <LineId Id="13" Count="0" />
      <LineId Id="6" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UdpReceiver.FB_init">
      <LineId Id="3" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="5" Count="2" />
      <LineId Id="25" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="41" Count="2" />
      <LineId Id="14" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UdpReceiver.FB_reinit">
      <LineId Id="3" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UdpReceiver.ListenPort.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UdpReceiver.ListenPort.Set">
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="19" Count="0" />
    </LineIds>
    <LineIds Name="FB_UdpReceiver.ReceiveData">
      <LineId Id="22" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="86" Count="1" />
      <LineId Id="70" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UdpReceiver.SendData">
      <LineId Id="19" Count="2" />
    </LineIds>
    <LineIds Name="FB_UdpReceiver.TcAddRef">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UdpReceiver.TcQueryInterface">
      <LineId Id="14" Count="3" />
      <LineId Id="37" Count="4" />
      <LineId Id="18" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UdpReceiver.TcRelease">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>